//Handles the logic of game states (whether plane hits a building).

`timescale 1ns / 1ps
module obstacle_logic(
	Clk,reset,
	Q_Initial,
	Q_Check,
	Q_Lose, 
	Start, Ack, 
	X_Edge_Left,
	X_Edge_Right,
	Y_Edge_Top,
	Y_Edge_Bottom,
	plane_X_L, plane_X_R, plane_Y_T, plane_Y_B
	);

// INPUTS //
input 	Clk, reset, Start, Ack;
input [9:0] plane_X_L; // plane's x
input [9:0] plane_Y_T; // plane's y
input [9:0] plane_X_R; // plane's x
input [9:0] plane_Y_B; // plane's y
input	[9:0] X_Edge_Left; // 10-bit x edge of current building (left edge)
input	[9:0] X_Edge_Right; // 10-bit x edge of current building (right edge)
input	[9:0] Y_Edge_Top; // 10 bit y edge of current building (top edge)
input	[9:0] Y_Edge_Bottom; // 10 bit y edge of current building (bottom edge)


// OUTPUTS //
output 	Q_Initial,
			Q_Check, Q_Lose;
				
reg 	Lose;		
reg	Check;	
reg 	Initial;
reg [2:0] state;

reg [9:0] t1;
reg [9:0] t2;
reg [9:0] t3;
reg [9:0] t4;


integer loseCounter;

//reg timer_out;
//reg [3:0] count;

assign {Q_Lose, Q_Check,
			Q_Initial } = state;

localparam
			QInitial = 3'b001,
			QCheck	= 3'b010,
			QLose 	= 3'b100,
			UNK		= 3'bXXX;
			
always @ (posedge Clk, posedge reset)
begin
	if(reset)
	begin
		state <= QInitial;
	end
	else
	
	begin
		case(state)
		
			QInitial:
			begin
				if(Start) // we're startin' folks
					state <= QCheck;
			end	
			
			QCheck:
			begin
			// if (Plane is below the bottom part of pipe OR above the top part of pipe
			//			AND Bird is inside of the pipe X-wise) Then the player loses
//				t1 = Y_Edge_Top + 10'd10;
	//			t2 = Y_Edge_Bottom - 10'd10;
		//		t3 = Bird_X_L - 10'd10;
			//	t4 = Bird_X_R + 10'd10;
				//if( (Bird_Y_T >= Y_Edge_Bottom || Bird_Y_B <= Y_Edge_Top)
				//	&& (Bird_X_L > X_Edge_Left && Bird_X_R < X_Edge_Right) )
				if( (plane_Y_T >= Y_Edge_Bottom || plane_Y_B <= Y_Edge_Top)
					&& (plane_X_R > X_Edge_Left && plane_X_L < X_Edge_Right) )
					begin
						state <= QLose;
					end
			end	
			
			QLose:
			begin
				loseCounter <= loseCounter+1;
				if(Ack && loseCounter>=1600)
					begin						
						state <= QInitial;
						loseCounter <= 0;
					end
			end

			default:
				state <= UNK;
		endcase
	end
end

endmodule


